ans = []
rows = []


def f(n, row, current, data):  # n - общее кол-во городов, row - последовательность городов, которые прошли, current - длины дорог, которые прошли, data - данные от пользователя
    global ans
    # print(n, row, current)
    if row and row[-1] == n - 1:
        # current.append(0)
        ans.append(current)
        rows.append(row)
    else:
        last = int(row[-1])  # last город
        for i in range(n):
            if data[last][i] == '-' or i in row or i == last:
                continue
            f(n, row + [i], current + [int(data[last][i])], data)
        return ans, rows


n = int(input('Введите количество городов: '))  # по умолчанию считается, что нужно проехать из первого города в последний (в порядке ввода)
go_out = False
while True:
    data = {}
    flag = False
    for i in range(n):
        data[i] = input(f'Введите строку таблицы № {i + 1}: ').split()
    for i in range(n):
        if data[i][i] != '0':
            print('Некорректные данные, попробуйте еще раз')
            break
        for j in range(n):
            if i != j and data[i][j] != data[j][i]:
                print('Некорректные данные, попробуйте еще раз')
                flag = True
                break
        if flag:
            break
    else:
        print("Корректные данные")
        break

print(data)


# data = {0: ['0', '1', '4', '3', '7'], 1: ['1', '0', '2', '5', '-'], 2: ['4', '2', '0', '3', '-'], 3: ['3', '5', '3', '0', '2'], 4: ['7', '-', '-', '2', '0']}
length, rows = f(len(data), [0], [], data)
print(length)
sums = list(map(sum, length))
print(sums)
shortest = min(sums)
shortest_row = rows[sums.index(shortest)]

print('Минимальная длина дороги: ', shortest)
print('Самая короткая дорога: ', shortest_row)


alphabet = {0: "A", 1: "B", 2: "C", 3: "D", 4: "E", 5: "F", 6: "G", 7: "H", 8: "I", 9: "J", 10: "K", 11: "L", 12: "M", 13: "N", 14: "O", 15: "P", 16: "Q", 17: "R"}
if max(shortest_row) <= 17:
    alpha_shortest_row = []
    for town in shortest_row:
        alpha_shortest_row.append(alphabet[town])
    print(" ".join(alpha_shortest_row))
